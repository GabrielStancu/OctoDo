// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OctoDo.EntityFramework;

#nullable disable

namespace OctoDo.EntityFramework.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("OctoDo.EntityFramework.DTOs.ActivityDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlanId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RoutineDtoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("RoutineDtoId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("OctoDo.EntityFramework.DTOs.PlanDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("OctoDo.EntityFramework.DTOs.RoutineDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("Routines");
                });

            modelBuilder.Entity("OctoDo.EntityFramework.DTOs.ToDoDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RoutineId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("RoutineId");

                    b.ToTable("ToDos");
                });

            modelBuilder.Entity("OctoDo.EntityFramework.DTOs.ActivityDto", b =>
                {
                    b.HasOne("OctoDo.EntityFramework.DTOs.PlanDto", "Plan")
                        .WithMany("Activities")
                        .HasForeignKey("PlanId");

                    b.HasOne("OctoDo.EntityFramework.DTOs.RoutineDto", null)
                        .WithMany("Activities")
                        .HasForeignKey("RoutineDtoId");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("OctoDo.EntityFramework.DTOs.RoutineDto", b =>
                {
                    b.HasOne("OctoDo.EntityFramework.DTOs.PlanDto", "Plan")
                        .WithMany("Routines")
                        .HasForeignKey("PlanId");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("OctoDo.EntityFramework.DTOs.ToDoDto", b =>
                {
                    b.HasOne("OctoDo.EntityFramework.DTOs.ActivityDto", "Activity")
                        .WithMany("ToDos")
                        .HasForeignKey("ActivityId");

                    b.HasOne("OctoDo.EntityFramework.DTOs.RoutineDto", "Routine")
                        .WithMany()
                        .HasForeignKey("RoutineId");

                    b.Navigation("Activity");

                    b.Navigation("Routine");
                });

            modelBuilder.Entity("OctoDo.EntityFramework.DTOs.ActivityDto", b =>
                {
                    b.Navigation("ToDos");
                });

            modelBuilder.Entity("OctoDo.EntityFramework.DTOs.PlanDto", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Routines");
                });

            modelBuilder.Entity("OctoDo.EntityFramework.DTOs.RoutineDto", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
